# ------------------------------------------------------------------------------------
# 引数定義 (ARG)
# ------------------------------------------------------------------------------------
ARG RUBY_VERSION=3.3.0
ARG NODE_VERSION=20
ARG BUNDLER_VERSION=2.5.3

# ------------------------------------------------------------------------------------
# ステージ 1: base - 全てのステージの基礎となるRuby環境
# ------------------------------------------------------------------------------------
FROM ruby:${RUBY_VERSION}-slim AS base

ARG BUNDLER_VERSION

ENV LANG C.UTF-8
ENV BUNDLE_PATH="vendor/bundle"
ENV BUNDLE_WITHOUT="development:test"

# OSパッケージを更新し、ビルドと実行に共通で必要なライブラリをインストール
RUN apt-get update -qq && apt-get install -y --no-install-recommends build-essential git libpq-dev

# ------------------------------------------------------------------------------------
# ステージ 2: node_builder - Node.jsとYarnを準備する専用ステージ
# ------------------------------------------------------------------------------------
FROM node:${NODE_VERSION}-slim AS node_builder
# このステージは、nodeとyarnの実行ファイルをコピーするためだけに使用します


# ------------------------------------------------------------------------------------
# ステージ 3: gem_builder - 本番用のgemをインストールする専用ステージ
# ------------------------------------------------------------------------------------
FROM base AS gem_builder
WORKDIR /app

ARG BUNDLER_VERSION

# Bundlerを特定のバージョンでインストール
RUN gem install bundler -v ${BUNDLER_VERSION}

# Gemfileをコピーして、本番用のgemのみをインストール
COPY Gemfile Gemfile.lock ./
ENV BUNDLE_WITHOUT="development:test"
RUN bundle install --jobs $(nproc) --retry 3


# ------------------------------------------------------------------------------------
# ステージ 4: assets_builder - 本番用アセットをビルドする専用ステージ
# ------------------------------------------------------------------------------------
FROM base AS assets_builder
WORKDIR /app

ARG NODE_VERSION
ARG RAILS_MASTER_KEY
ARG DATABASE_URL

# node_builderステージから、nodeとyarnの実行ファイルのみをコピー
COPY --from=node_builder /usr/local/bin/node /usr/local/bin/
COPY --from=node_builder /opt/yarn-v* /opt/yarn
RUN ln -s /opt/yarn/bin/yarn /usr/local/bin/yarn && \
    ln -s /opt/yarn/bin/yarnpkg /usr/local/bin/yarnpkg

# gem_builderステージから、インストール済みの本番用gemをコピー
COPY --from=gem_builder /app/vendor/bundle /app/vendor/bundle

# アプリケーションのコードと設定ファイルをコピー
COPY package.json yarn.lock ./

# JavaScriptの依存関係をインストール
RUN yarn install --frozen-lockfile

COPY . .

# アセットをプリコンパイル
ENV RAILS_ENV="production"
ENV SECRET_KEY_BASE_DUMMY=1

# Renderの環境変数 (secrets) をビルド時に利用する
RUN --mount=type=secret,id=RAILS_MASTER_KEY,dst=/app/config/master.key \
    SECRET_KEY_BASE_DUMMY=1 bundle exec rails assets:precompile


# ------------------------------------------------------------------------------------
# ステージ 5: development - 開発環境用ステージ
# ------------------------------------------------------------------------------------
FROM base AS development
WORKDIR /app

ARG RUBY_VERSION
ARG NODE_VERSION
ARG BUNDLER_VERSION

# 開発に必要なOSライブラリを追加 (curlなど)
RUN apt-get update -qq && apt-get install -y --no-install-recommends curl nodejs npm && npm install -g yarn

COPY Gemfile Gemfile.lock ./
ENV BUNDLE_WITHOUT=""
RUN bundle install --jobs $(nproc) --retry 3

COPY package.json yarn.lock ./
RUN yarn install

# アプリケーションコード全体をコピー
COPY . .


# ------------------------------------------------------------------------------------
# ステージ 6: final - 最終的な本番実行イメージ
# ------------------------------------------------------------------------------------
FROM base AS final
WORKDIR /app

# 実行に必要な最小限のOSライブラリのみをインストール
RUN apt-get update -qq && \
    apt-get install -y --no-install-recommends \
       libpq5 \
    && rm -rf /var/lib/apt/lists/*

# gem_builderステージとassets_builderステージから必要なファイルのみをコピー
COPY --from=gem_builder /app/vendor/bundle /app/vendor/bundle
COPY --from=assets_builder /app/public /app/public
COPY . .

# エントリーポイントスクリプトを実行可能にする
COPY bin/entrypoint.sh /usr/bin/
RUN chmod +x /usr/bin/entrypoint.sh

# コンテナ起動時に、まず entrypoint.sh を実行するように設定
ENTRYPOINT ["entrypoint.sh"]

# 実行に必要な環境変数を設定
ENV RAILS_ENV="production" \
    RAILS_LOG_TO_STDOUT="true" \
    RAILS_SERVE_STATIC_FILES="true"

EXPOSE 3000
CMD ["bundle", "exec", "puma", "-C", "config/puma.rb"]