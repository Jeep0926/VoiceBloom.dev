ARG RUBY_VERSION=3.3.0
ARG NODE_MAJOR=20

# 1. ベースイメージ
FROM ruby:${RUBY_VERSION}-slim AS base
ENV LANG C.UTF-8
ENV RAILS_ENV development
ENV BUNDLE_PATH="vendor/bundle"

# 2. ビルドに必要なOSレベルの依存関係をインストールするステージ
FROM base AS build_deps

# 基本的な依存関係 + curl, gnupg, bash, ca-certificates をインストール
RUN apt-get update -qq \
    && apt-get install -y --no-install-recommends \
       build-essential \
       curl \
       git \
       gnupg \
       libpq-dev \
       bash \
       ca-certificates

# NodeSource リポジトリを追加
RUN curl -fsSL https://deb.nodesource.com/setup_${NODE_MAJOR}.x | bash -

# ★★★ リポジトリ追加後にパッケージリストを更新 ★★★
RUN apt-get update -qq

# ★★★ nodejs と npm を明示的にインストール ★★★
RUN apt-get install -y --no-install-recommends nodejs npm

# ★★★ バージョンを確認してインストールされたかチェック ★★★
RUN node -v
RUN npm -v

# yarn をインストール
RUN npm install -g yarn

# クリーンアップ
RUN rm -rf /var/lib/apt/lists/*

# 3. 開発用ステージ
FROM build_deps AS development
WORKDIR /app
# Gemfile* を先にコピーして bundle install を実行（キャッシュ効率化のため）
COPY Gemfile Gemfile.lock ./
ENV BUNDLE_WITHOUT=""
RUN bundle install --jobs $(nproc) --retry 3

# JavaScriptの依存関係をインストール
COPY package.json yarn.lock ./
RUN yarn install

# アプリケーションコード全体をコピー
COPY . .
# このステージは ./bin/dev でRailsサーバーやJSビルドを起動する準備が整った状態

# 4. 本番用Gemをインストールするステージ
FROM build_deps AS bundle_install_production
WORKDIR /app
COPY Gemfile Gemfile.lock ./
ENV BUNDLE_WITHOUT="development:test" \
    BUNDLE_DEPLOYMENT="1" \
    BUNDLE_PATH="vendor/bundle" \
    BUNDLE_CLEAN="true"
RUN bundle install --jobs $(nproc) --retry 3

# 5. アセットをビルドするステージ
FROM build_deps AS assets_builder_production
WORKDIR /app
COPY . .
COPY --from=bundle_install_production /app/vendor/bundle /app/vendor/bundle

ENV RAILS_ENV="production"

# ビルドを通過させるためのダミーを設定
ENV CLOUDFLARE_ACCOUNT_ID="dummy-account-id"
ENV CLOUDFLARE_ACCESS_KEY_ID="dummy-key-id"
ENV CLOUDFLARE_SECRET_ACCESS_KEY="dummy-secret"
ENV CLOUDFLARE_BUCKET_NAME="dummy-bucket"

# アセットプリコンパイル（TailwindCSSビルドも含むことを期待、または個別に実行）
# 実行権限をbin/railsに付与
RUN chmod +x bin/rails

# Node.js パッケージをインストール
RUN yarn install

# TailwindCSS をビルド
RUN SECRET_KEY_BASE_DUMMY=1 ./bin/rails tailwindcss:build

# JavaScript をバンドル
RUN yarn build

# アセットプリコンパイル
RUN SECRET_KEY_BASE_DUMMY=1 ./bin/rails assets:precompile

# 6. 最終的な実行イメージステージ
FROM base AS final
WORKDIR /app

# 実行に必要な環境変数を設定
ENV RAILS_ENV="production" \
    BUNDLE_PATH="vendor/bundle" \
    RAILS_LOG_TO_STDOUT="true" \
    RAILS_SERVE_STATIC_FILES="true"
    # PORT は Render が自動で設定するので、ここでは不要なことが多い

# 実行に必要な最小限のOSライブラリをインストール
RUN apt-get update -qq \
    && apt-get install -y --no-install-recommends \
       libpq5 \
    && rm -rf /var/lib/apt/lists/*

# assets_builderステージから、インストール済みのGem、アプリケーションコード、ビルド済みアセットをコピー
COPY --from=assets_builder /app/vendor/bundle /app/vendor/bundle
COPY --from=assets_builder /app /app

# bin/rails と bin/bundle に実行権限を付与 (COPYで権限が失われることがあるため)
RUN chmod +x /app/bin/rails

EXPOSE 3000
# CMD は fly.toml または Render の Start Command で指定される
CMD ["bundle", "exec", "puma", "-C", "config/puma.rb"]